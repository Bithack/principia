#!/bin/sh
user_home="$USERPROFILE"
makecmd="make -r"

debug="0"
release="0"
run="1"

CONFIG_PATH=`pwd`/config.sh

[[ -f "$CONFIG_PATH" ]] && source "$CONFIG_PATH"

DEBUGFLAGS="-DDEBUG_PRELOADER_SANITY=1 -O0 -ffast-math -ggdb -Werror=return-type -DDEBUG=1 -D_DEBUG_DUMP $EXTRA_DEBUGFLAGS"
DEBUGFLAGS_LD="$EXTRA_DEBUGFLAGS_LD"

RELEASEFLAGS_CC="-O2 -ggdb -ffast-math -DNDEBUG=1  $EXTRA_RELEASEFLAGS_CC"
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fauto-inc-dec -fbranch-count-reg -fcombine-stack-adjustments -fcompare-elim -fcprop-registers -fdce -fdefer-pop -fdelayed-branch -fdse -fforward-propagate -fguess-branch-probability -fif-conversion2 -fif-conversion -finline-functions-called-once -fipa-pure-const -fipa-profile -fipa-reference "
#
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fmerge-constants -fmove-loop-invariants -fshrink-wrap -fsplit-wide-types -ftree-bit-ccp -ftree-ccp -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse "
#
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-forwprop -ftree-fre -ftree-phiprop -ftree-sink -ftree-slsr -ftree-sra -ftree-pta -ftree-ter -funit-at-a-time"

#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fauto-inc-dec -fcompare-elim -fcprop-registers -fdce -fdefer-pop -fdse -fguess-branch-probability -fif-conversion2 -fif-conversion -fipa-pure-const "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-profile -fipa-reference -fmerge-constants -fsplit-wide-types -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-copyrename -ftree-dce -ftree-dominator-opts "
#
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fthread-jumps "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-functions "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-jumps "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-loops "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-labels "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcaller-saves "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcrossjumping "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcse-follow-jumps "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcse-skip-blocks "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fdelete-null-pointer-checks "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fdevirtualize "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fexpensive-optimizations "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fgcse "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fgcse-lm "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fhoist-adjacent-loads "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -finline-small-functions "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -findirect-inlining "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-sra "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -foptimize-sibling-calls "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fpartial-inlining "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fpeephole2 "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fregmove "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -freorder-blocks "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -freorder-functions "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -frerun-cse-after-loop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fsched-interblock "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fsched-spec "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fschedule-insns "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fschedule-insns2 "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fstrict-aliasing "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fstrict-overflow "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-switch-conversion "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-tail-merge "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-pre "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-vrp "
#
##one of these break shit
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-dse "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-forwprop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-fre "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-phiprop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-slsr "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-sra "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-pta "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-ter "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -funit-at-a-time "



#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fdefer-pop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fdelayed-branch "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fguess-branch-probability "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcprop-registers "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fforward-propagate "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fif-conversion "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fif-conversion2 "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-pure-const "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-reference "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-profile "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fmerge-constants "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fshrink-wrap "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fsplit-wide-types "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-ccp "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-bit-ccp "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-dce "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-dominator-opts "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-dse "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-ter "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-copyrename "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-fre "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-copy-prop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-sink "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-ch "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcombine-stack-adjustments "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcompare-elim "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-slsr "
#
##-finline-small-functions
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -findirect-inlining "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fpartial-inlining "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fthread-jumps "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcrossjumping "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -foptimize-sibling-calls "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcse-follow-jumps "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fgcse "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fexpensive-optimizations "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -frerun-cse-after-loop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fcaller-saves "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fpeephole2 "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fschedule-insns2 "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fregmove "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fstrict-aliasing "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fstrict-overflow "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -freorder-blocks "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -freorder-functions "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-vrp "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-builtin-call-dce "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-pre "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-switch-conversion "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-cp "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fdevirtualize "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fipa-sra "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-loops "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-jumps "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-labels "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -falign-functions "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -ftree-tail-merge "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fhoist-adjacent-loads "

#OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_fschedule_insns, NULL, 1 },
#OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_foptimize_strlen, NULL, 1 },

#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-dse "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-forwprop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-fre "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-phiprop "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-slsr "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-sra "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-pta "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-tree-ter "
#RELEASEFLAGS_CC="$RELEASEFLAGS_CC -fno-unit-at-a-time "

RELEASEFLAGS_CXX="$RELEASEFLAGS_CC  $EXTRA_RELEASEFLAGS_CXX"
#RELEASEFLAGS_LD="-Wl,-O,-s,--gc-sections $EXTRA_RELEASEFLAGS_LD"

CFLAGS="$DEBUGFLAGS"
CXXFLAGS="$CFLAGS"
CPPFLAGS="$CFLAGS"

skipmake="false"

while test $# -gt 0; do
    case "$1" in
        --clean)
            echo "cleaning"
            $makecmd clean
            exit
            ;;
        -f|--fastcompile)
            mingw32-make CFLAGS="$DEBUGFLAGS" CXXFLAGS="$DEBUGFLAGS" -j5
            exit
            ;;
        -s|--silent)
            echo "only compiling"
            run="0"
            shift
            ;;
        -x|--exec)
            echo "only executing"
            skipmake="true"
            shift
            ;;
        -g|--gdb)
            debug="1"
            shift
            ;;
        -v|--valgrind)
            debug="2"
            shift
            ;;
        --drmemory)
            debug="2"
            shift
            ;;
        -r|--release)
            release="1"
            shift
            ;;
    esac
done

if [ "$release" -eq "1" ]; then
    CFLAGS="$RELEASEFLAGS_CC"
    CXXFLAGS="$RELEASEFLAGS_CXX"
    CPPFLAGS="$RELEASEFLAGS_CXX"
    LDFLAGS="$RELEASEFLAGS_LD"
    mingw32-make CFLAGS="$RELEASEFLAGS_CC" CXXFLAGS="$RELEASEFLAGS_CXX" LDFLAGS="$RELEASEFLAGS_LD" -j9
    $makecmd CFLAGS="$RELEASEFLAGS_CC" CXXFLAGS="$RELEASEFLAGS_CXX" LDFLAGS="$RELEASEFLAGS_LD"
    exit
fi

($skipmake || $makecmd CFLAGS="$DEBUGFLAGS" CXXFLAGS="$DEBUGFLAGS") &&
if [ "$run" -eq "1" ]; then
    if [ "$debug" -eq "2" ]; then
        drmemory -logdir ./drmemory -- principia
    elif [ "$debug" -eq "1" ]; then
        gdb principia
    else
        principia
    fi
fi
