0:Plank
A wooden plank. Any of the two ends of a plank can be attached to other objects. Place an end of the plank near another object and click the appearing icon to attach the plank to that point.

Material:
Light wood, slightly bouncy, low friction.

Sublayer depth: 2
-----
1:Thick plank
Same properties as the plank, but slightly thicker.

Sublayer depth: 2
-----
2:Wood ball
A ball made out of light wood. Slightly bouncy, low friction.

Sublayer depth: 2
-----
3:Cylinder
Wooden cylinder. The centroid of the cylinder can be attached to other objects. Move the cylinder to another layer, drag it above or under the other object, and click the appearing icon.

Material:
Light wood, slightly bouncy, low-medium friction.

Sublayer depth: 4
-----
4:Sublayer plank
A wooden plank that can be placed in any of the 4 different sublayers but in the same layer of other objects. This feature has some useful properties, for example, attach it to a motor will allow smaller objects to pass through the motors anchor point in the same layer as the sublayer plank. This allows you to create rotating pipelines.

Regular planks can be attached by placing the in front of the sublayer plank.

Material:
Light wood, slightly bouncy, low friction.

Sublayer depth: 1
-----
5:Platform
Metal platform fixed to the background.

Material:
Galvanized metal. Low friction and low bounciness.

Sublayer depth: 4

Advanced help:
In Adventure Mode, if a group of objects is connected to one or more platforms, the adventure robot is unable to interact with the group.
-----
6:Iron Ball
A heavy ball with very high bounciness. Low friction.

Sublayer depth: 2
-----
7:Rail
Straight rail fixed to the background wall. 

Material:
Brushed iron, medium bounciness, medium friction.

Sublayer depth: 2
-----
8:Rail (up)
Straight rail skewed upwards. Same properties as the straight rail.
-----
9:Rail (down)
Straight rail skewed downwards. Same properties as the straight rail.
-----
10:Rail (turn)
Rail turning 90 degrees. Same properties as the straight rail.
-----
11:Trampoline
Trampoline fixed to the wall. Can optionally be wired to a power source for extra feedback.

Sublayer depth: 4

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Voltage
<b><tt>IN1</tt></b>: On/off control (if voltage connected)
<b><tt>OUT0</tt></b>: Displacement feedback
-----
12:Rope
A rope with two wooden ends. The ends can be attached to other objects.

Sublayer depth: 2
-----
13:Wheel
Similar to the cylinder object, the centroid of the wheel can be attached to objects in neighbouring layers. The wheel is slightly heavier than the wooden cylinder.

Material:
Very high friction. Low bounciness.

Sublayer depth: 4
-----
14:Magnet
A magnet that can attract or repell metal objects.
-----
15:Seesaw base
A base for setting up a seesaw. Other objects such as planks can be attached to the end of the extended arm. The bottom of the base can also be attached to other objects.
-----
16:Open pivot
A rotary joint that allows slight relative movement, can help a mechanical system from locking. Both ends can be attached to other objects.
-----
17:Ball pipeline
Special object that allows a ball, either wood or iron, to transition from one layer to another. The pipeline can be rotated to decide whether the ball is moved one layer inwards or one layer outwards.

When a ball rolls inside the pipeline, the pipeline will enclose the ball within a box and begin the pipeline shift. The pipeline will wait until there is no other object in the way. As soon as the target layer is free from other objects in the target location, the ball is immediately pushed to that layer. The pipeline then opens itself up again and allows for the next ball to enter the process.
-----
18:Gearbox
The gearbox allows you to construct gearing mechanics. It has three axles, one input and two outputs. The first output (top) turns the incoming rotation backwards. Both of the two outputs are connected to the same output joint.

Click the configuration button to enter the gearbox configuration screen. This screen allows you to place gears on any of the three axles. The gearbox will automatically detect valid configurations and create one "step" for each valid configuration. A valid configuration is whenever a gear on the incoming axle matches a gear on any of the two outgoing axles.

A list of all valid configurations will be displayed as buttons, click on any button to view the configuration.

Please note that the gears needs to be carefully positioned to allow gear shifting. For example, a big gear on the input axle and a big gear on one of the output axles will prevent the gear from shifting further, since the two gears will collide. By sorting the gears on each axle by size, an optimal number of valid configurations can be found. Once you get the hang of it, you should be able to create at least 6 unique and valid configurations.

The gearbox has two input signal sockets. <b><tt>IN0</tt></b> shifts the gear -1 step and <b><tt>IN1</tt></b> shifts the gear +1 step. The gear is shifted by moving the input axle to the next valid configuration. Use a sparsifier to prevent the gear from being switched too quickly.
-----
19:Damper
Damper/shock absorber. Both ends can be attached to other objects, either in the same layer as the damper or to objects in neighbouring layers.

The damper has two configurable properties: Pressure and maximum speed. Pressure is the amount of force that the damper is able to apply to return to its equilibrium. The maximum speed controls how fast the damper responds. A lower maximum speed produces a soft response, while a higher maximum speed produces a more bouncy behaviour.
-----
20:DC Motor
DC motor. Power this motor by connecting it to a controller (CT) using an interface cable (blue cable). For more information on how to use motors, open up the object description of CT Mini. Any side of the motor can be attached to nearby objects.

Characteristics:
* High maximum speed
* Speed control with constant torque 
* No engine braking

<u>NOTE:</u>
Since this motor is not capable of keeping its idle position or slowing down, it might oscillate if interfacing with a CT Servo. For precise angle control, the Servo Motor should be used instead.
-----
21:Servo Motor
A motor that is good for precise angle control or abrupt speed control. Power this motor by connecting it to a controller (CT) using an interface cable (blue cable).

Characteristics:
* Low maximum speed
* High torque
* A desired speed below the current speed slows down (brakes) the motor
* Applies torque to hold its idle position or desired angle

By default, the 0-angle is set to the initial angle of the motor. The pink rotary icon can be used to adjust the initial offset to the 0-angle. For example, if you align the pink rotary icon with what you have connected to the motor, the offset will return the 0-angle to point right. For absolute angle control, you should always align the pink rotary icon with what you have connected.
-----
22:Linear Motor
A linear motor attempts to move its pivot to the target end of the motor. Power the motor by connecting it to a controller (CT) using an interface cable (blue cable).

Properties: Speed/force tradeoff, size

Speed/force (internal gearing) allows you to control the tradeoff between the speed of the motor and the force of the motor.

Errors are reported through the interface if the motor is unable to move, unless it has reached its final position (any of the two ends depending on direction). Errors are always reported if the motor is moving in the wrong direction.
-----
23:Linear Servo
Linear motor with precise position control and active force application to hold its position. Power the motor by connecting it to a controller (CT) using an interface cable (blue cable).

The linear servo has a fixed maximum force solely dependant on the eleectronic current from the attached controller's power source.
-----
24:CT Mini
This controller controls the speed and direction of a motor.

To drive a motor you will need 3 objects in total: The motor, a controller (CT), and a power source. Connect <b><tt>IN0</tt></b> of the CT Mini to a power source (battery or power supply), and connect <b><tt>OUT0</tt></b> of the CT to any kind of motor.

<b><tt>IN1</tt></b> allows you to control the speed of the connected motor. The resulting motor speed is proportional to the input voltage. Leaving <b><tt>IN1</tt></b> disconnected will result in constant maximum speed.

<b><tt>IN2</tt></b> Reverses the motor as long as a rounded value of 1 is read from the input

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Power
<b><tt>IN1</tt></b>: Speed control (optional)
<b><tt>IN2</tt></b>: Reverse (optional)
<b><tt>OUT0</tt></b>: Motor interface, blue cable
-----
25:CT Servo
This controller allows you to control the state (translation or angle) of any kind of motor. The controller outputs feedback data through <b><tt>OUT1</tt></b> and <b><tt>OUT2</tt></b>.

Scroll down below to read how the CT Servo treats the difference between linear and rotary motors.

While the CT Servo is compatible with all kinds of motors, for best results you should connect it to a servo-designed motor. These include Linear Servo and Servo Motor.

The CT Servo outputs two kinds of feedback data through <b><tt>OUT1</tt></b> and <b><tt>OUT2</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Motor interface, blue cable
<b><tt>OUT1</tt></b>: Angle/Translation feedback
<b><tt>OUT2</tt></b>: Torque/force feedback
<b><tt>IN1</tt></b>: Servo control
<b><tt>IN0</tt></b>: Power

FOR ROTARY MOTORS (DC Motor, Servo Motor):
The input servo control (<b><tt>IN1</tt></b>) is the target angle of the rotary motor. The target angle is 360 * <b><tt>IN1</tt></b>, which means that an input value of 0.5 corresponds to 180 degrees, for example. The CT Servo will always calculate the shortest path to the target angle.

The current angle of the motor will be reported through <b><tt>OUT1</tt></b>. The reported angle follows the same scheme as the input angle. When the motor has reached its target angle, <b><tt>IN1</tt></b> is equal to or almost equal to <b><tt>OUT1</tt></b>.

The amount of torque that the motor is applying to reach its target angle is reported through <b><tt>OUT2</tt></b>. This value is a percentage of the maximum possible torque that the motor is capable of applying. A value of 1 means that the motor is applying as much torque as possible. This value should be relatively low unless the motor is stuck.

FOR L<b><tt>INEAR</tt></b> MOTORS (Linear Motor, Linear Servo): The input servo control (<b><tt>IN1</tt></b>) sets the target position of the linear motors pivot. A value of 0 is one end of the motor, and a value of 1 the other end.

The current position is reported through <b><tt>OUT1</tt></b>.

The amount of force being applied to move the pivot is reported through <b><tt>OUT2</tt></b>. A value of 1 means maximum force is being applied and may mean that the motor is stuck.
-----
26:CT Feedback
The CT Feedback is an extended version of CT Mini with 3 output feedback slots. CT Feedback supports any kind of motor.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Motor interface, blue cable
<b><tt>OUT1</tt></b>: Speed feedback (optional)
<b><tt>OUT2</tt></b>: Force/torque feedback (optional)
<b><tt>OUT3</tt></b>: Error feedback (optional)
<b><tt>IN1</tt></b>: Speed control (optional, default = 1)
<b><tt>IN2</tt></b>: Reverse (optional, default = 0)
<b><tt>IN3</tt></b>: Speed/force tradeoff control (optional, default = as defined by slider)
<b><tt>IN0</tt></b>: Power

The current speed of the motor is reported through <b><tt>OUT1</tt></b>. The reported speed is a percentage of the maximum speed of the motor, where 0 means no movement and 1 means the motor is moving at its maximum speed.

The force or torque being applied by the motor is reported in a similar manner through <b><tt>OUT2</tt></b>. It is a value between 0 and 1 where 1 is the maximum force or torque attainable by the motor.

The error feedback (<b><tt>OUT3</tt></b>) outputs exactly 1 when an "error" is detected. Errors are due to external forces that prevent the motor from moving or causes the motor to move in the wrong direction. Note that this signal can be very noisy when the motor is stuck. It is a constant 1 if the motor is moving in the wrong direction.
-----
27:RC Basic
Basic control panel with support for 4 output signals.

The RC family of objects allows you to construct control interfaces with buttons, sliders and rotary widgets. These widgets send signals (through red wires), that you can process and forward to your own electronics.

Click the configuration button to open up the control panel configuration screen. Drag widgets to place them on the screen. Each widget will be connected to an output socket, the first widget you place will be connected to <b><tt>OUT0</tt></b>, the second to <b><tt>OUT1</tt></b>, and so on.

TIP: Connect your control panel to a set of Debugger objects to visualize how the widgets work.

When the game is played, the control panel can be activated. When any of the widgets are touched or modified, it responds by outputing a value through its output socket.

There are three kinds of widgets.

<u>Buttons</u>
A constant value of 0 is reported by default, when the button is pressed a value of 1 is reported and continue being reported until the button is released again.

<u>Sliders</u>
The left end of the slider is 0, the right end 1. Any intermediary position is a raw value between 0 and 1. The default value of the slider can be set by moving its handle in the control panel configuration screen.

<u>Rotary widgets</u>
Reports a value from 0 to 1 depending on the angular position of the knob. The right-most position (0 degrees) is 0, if the knob is facing UP the reported value is 0.25. If the knob is facing down the reported value is 0.75. The default output value (initial position) of the rotary widget can be set by moving the knob in the control panel configuration screen.
-----
28:RC IO-3
Smaller version of RC MONSTRO. See the object description of RC MONSTRO for more info.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>-2  Raw signal
<b><tt>OUT3</tt></b>-5  Focus signal (0 or 1)

<b><tt>IN0</tt></b>-2   Feedback/report current value
<b><tt>IN3</tt></b>-5   Override value
<b><tt>IN6</tt></b>-8   Override enabled/disabled
-----
29:RC Monstro
Control panel with support for 8 widgets, capable of overriding signals and receiving feedback from external electronics.

Each widget is connected to 2 output slots and 3 input slots, i.e. any widget 'x' is connected to <b><tt>OUTx</tt></b>, <b><tt>OUT(x+8)</tt></b>, <b><tt>INx</tt></b>, <b><tt>IN(x+8)</tt></b> and <b><tt>IN(x+16)</tt></b>.

* <b><tt>OUT0</tt></b>-7
Raw signal, same as any other RC object. If override mode is enabled, the override value is reported here instead.

* <b><tt>OUT8</tt></b>-15
Reports widget focus. For example, if a slider is dragged and held at 0, the raw signal is 0, but the focus signal is 1. When the slider is released the raw signal remains at 0 and the focus signal turns 0 as well. This can be used to create a recoil effect, when the focus value is 0, send a 1 (inverted focus signal) to the <b><tt>IN16-23</tt></b> (Override enabled/disabled), when the slider is released it will recoil back to 0 (or another value as set through <b><tt>IN8-15</tt></b>).

For a button, the focus signal is always equal to the raw signal, unless the raw signal is overriden (see below).

* <b><tt>IN0-7</tt></b>
Feedback input. Report the current value of the widget here. The current value will be displayed as a visual hint on screen. For example, a button will light up as if pressed, and a slider will show an extra knob at the feedback position. Can be used to, for example, create a toggle button (scroll down to see examples).

* <b><tt>IN8-15</tt></b>
Set the override-value. The value received here is the alternative output value used when override mode is enabled (see below).

* <b><tt>IN16</tt></b> to <b><tt>IN23</tt></b>
Toggles override-mode and selects which output signal to use. A binary value of 0 means the control panel output value is used (from widgets on the screen), and a binary value of 1 means the widget is ignored and the value is overriden and read from <b><tt>IN8-15</tt></b> instead.

<b><big>Examples</big></b>
Example 1) Toggle button
We want a button that each time pressed changes its state. We want the state to be reflected on the visible button. Add a button widget to <b><tt>OUT0</tt></b>, and connect <b><tt>OUT0</tt></b> to a Sparsifier. Then connect the Sparsifier to a Toggler. The output of the Toggler is the value we want. Send the toggler output to <b><tt>IN0</tt></b> (feedback value) and also your own electronics. You now have a toggle button.

Example 2) Slider with recoil
Add a slider widget to <b><tt>OUT0</tt></b>. Connect <b><tt>OUT8</tt></b> (focus) to an Inverter and then to <b><tt>IN16</tt></b> (Override enable/disable). The slider will now recoil to 0 when not focused (inverted focus value = 1), if you want it to recoil to another value than 0, for example 0.5, then connect something to <b><tt>IN8</tt></b> (Set value). 0 is the default value for override if nothing is connected.

Example 3) Slider with springy Recoil
We want to create a slider with a recoil effect that acts like a spring and does not instantly go back to 0. Add a slider widget to <b><tt>OUT0</tt></b>. Connect <b><tt>OUT8</tt></b> (focus) to an Inverter and then to <b><tt>IN16</tt></b> (Override enable/disable). Connect <b><tt>OUT0</tt></b> (raw signal) to your own electronics and separately to a Square component. Connect the Square component to <b><tt>IN8</tt></b> (Override value).

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>-7  Raw signal
<b><tt>OUT8</tt></b>-15 Focus signal (0 or 1)

<b><tt>IN0</tt></b>-7   Feedback/report current value
<b><tt>IN8</tt></b>-15  Override value
<b><tt>IN16</tt></b>-23 Override enabled/disabled
-----
30:Wall pivot
Fixed pivot attached to the wall
-----
31:Battery (3V)
2 AA 1.5V batteries series connected, totaling 3 V. Use white power cables to give power to objects such as the Fan or the Simple Motor.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: 3V Power output
-----
32:Power Supply
Voltage and current regulating power supply. Constant output between 1 V and 24 V. Each output is independent of the others.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Power output multiplier
<b><tt>OUT0-OUT8</tt></b>: Power output, controlled by the set voltage and IN0.
-----
33:Power Cable
Cable used to transmit power from one device to another. Connect the cable from a battery or a power supply to an object that requires power (such as the Simple Motor, Trampoline or any CT object).
-----
34:Signal Cable
Cable used for signaling. Signals can be any value between 0 and 1. Many signals are either 0 (off) or 1 (on), and are then called binary signals. When a signal is any other fraction between 0 and 1, such as 0.5, then the signal is referred to as a "raw" signal.

Some devices only care for binary signals, these devices are called binary devices. Examples of binary devices include the XOR gate, AND gate and Sparsifier. When a raw signal is sent to a binary device, the signal is rounded to the nearest binary number. For example, a value of 0.75 would be rounded to 1, and a value of 0.123 would be rounded to 0.

All devices operate at a frequency of 125 Hz, which means 125 signals can be sent through your whole circuitry each second.
-----
35:Interface Cable
Blue cable used for communication between motors and controllers (CT family).

The purpose of interface system is to allow you to keep your advanced circuitry at one location. By communicating with CT objects instead of with motors directly, only one cable (the interface cable) per motor needs to reach outside your system. This keeps your advanced electronics safe in one location and avoids cable clutter.

To read more about how to use the interface cable, open up the object description for CT Mini.
-----
36:Magnetic Plug
The Magnetic Plug is an object that can attract Magnetic Sockets. When two magnetic objects are connected, the plug can transfer signals to the socket.

If the plug is not connected to a socket, the IN0 signal will be sent to the alternative output, <b><tt>OUT1</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Input signal
<b><tt>OUT0</tt></b>: Status (is plug connected to socket?)
<b><tt>OUT1</tt></b>: Alternative output
-----
37:Magnetic Socket
The Magnetic Socket is an object that can attract Magnetic Plugs. When two magnetic objects are connected, the plug can transfer signals to the socket.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Status (is plug connected to socket?)
<b><tt>OUT1</tt></b>: Signal received from plug
-----
38:Switch
5 <b><tt>OUT</tt></b>, 3 <b><tt>IN</tt></b>

The input signal (<b><tt>IN0</tt></b>) is sent to any of the 5 outputs. Initially, the signal is sent to <b><tt>OUT0</tt></b>. The <b><tt>IN1</tt></b> and <b><tt>IN2</tt></b> switch which output receives the signal. If a 1 is sent to <b><tt>IN2</tt></b>, the next output is selected, if a 1 is sent to <b><tt>IN1</tt></b>, the previous output is selected.

A Sparsifier can help filter out abundant data.
-----
39:Interface clip
Cable clip for interface cables (blue cables). The cable clip allows you to drag interface cables along other objects. The signal is passed through the clip without modification.

Both sides of the clip can be attached to other objects.
-----
40:Gyroscope
Continuously signals the absolute angle of the gyroscope as a value from 0 to 1 where the output value is A/360 where A is the absolute angle in degrees.

Also see the Tiltmeter for measuring angular displacement.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Angle of the gyroscope as A/360 where A is its angle in degrees.
-----
41:Button
Mechanical one-time button. Signals 0 when not pressed, 1 continuously after being pressed.

You can use a Sparsifier device to convert the button click to a single "tick".

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Button state output
-----
42:XOR gate
Outputs 1 when exactly one of its input is 1.

The XOR gate is a binary device. If a value of 1 is read from <b><tt>IN0</tt></b> or <b><tt>IN1</tt></b>, but not from both at the same time, the XOR gate outputs 1. Otherwise it outputs 0. Since this is a binary device, the input value is rounded so any value above 0.5 is equal to 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: A XOR B
-----
43:OR gate
Outputs 1 when at least one of its input is 0.

The OR gate is a binary device. If any input is 1, output 1. Otherwise output 0. Since this is a binary device, the input value is rounded so any value above 0.5 is equal to 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: A OR B
-----
44:AND gate
Outputs 1 when both of its inputs are 1.

The AND gate is a binary device. If both <b><tt>IN0</tt></b> and <b><tt>IN1</tt></b> is 1, output 1. Otherwise output 0. Since this is a binary device, the input value is rounded so any value above 0.5 is equal to 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: A AND B
-----
45:NAND gate
Same as the AND gate, but the output value is inverted.

The NAND gate is a binary device. Given two inputs, <b><tt>IN0</tt></b> and <b><tt>IN1</tt></b>, <b><tt>OUT0</tt></b> will output 1 if at most one of <b><tt>IN0</tt></b> and <b><tt>IN1</tt></b> are 1. Since this is a binary device, the input value is rounded so any value above 0.5 is equal to 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: A NAND B
-----
46:Inverter
Inverts <b><tt>IN0</tt></b> and writes it to <b><tt>OUT0</tt></b>. If the input signal is raw, <span font_family="monospace" background="white">1-<b>IN0</b></span> is written to <b><tt>OUT0</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Input signal
<b><tt>OUT0</tt></b>: Inverted <b><tt>IN0</tt></b>
-----
47:Floor
If the input value is anything other than exactly 1, output 0.

Any raw signal other than exactly 1.0 is treated as 0.0. For example, 0.99999999 is treated as 0.0. It basically discards the fractional part of a raw signal.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Input signal
<b><tt>OUT0</tt></b>: Result of a floor operation to <b><tt>IN0</tt></b>
-----
48:Square
Outputs <span font_family="monospace" background="white"><b>IN0</b> * <b>IN0</b></span>. Does not affect binary signals.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Input signal
<b><tt>OUT0</tt></b>: <span font_family="monospace" background="white"><b>IN0</b> * <b>IN0</b></span>
-----
49:Square root
Outputs the square root of <b><tt>IN0</tt></b>. Does not affect binary signals.
-----
50:Sparsifier
One of the most important devices to understand!

Outputs 1 if <b><tt>IN0</tt></b> is 1 and the preceding value of <b><tt>IN0</tt></b> was not 1.

Example)
<span font_family="monospace" background="white">000011110000</span> -> <span font_family="monospace" background="white">000010000000</span>

Use this gate to, for example, convert control panel button presses to button "clicks".
-----
51:Sparsifier+
Output 1 if <b><tt>IN0</tt></b> is not equal to the last value of <b><tt>IN0</tt></b>. Essentially, bit noise is smoothed out and coherent signal streams are turned into sparse noise.

Example 1)
<span font_family="monospace" background="white">00001111000010</span> -> <span font_family="monospace" background="white">00001000100011</span>

Example 2)
<span font_family="monospace" background="white">01010101</span> -> <span font_family="monospace" background="white">01111111</span>

Use this gate to do, for example, nothing. :(
-----
52:Epsilon
Add a very small value (<span font_family="monospace" background="white">1e-5</span>) to the input signal before passing it on. Use this component for systems where the output value does not converge to the output limit. For example, a series of Square root components will never reach exactly 1, but the Floor component requires a value of exactly 1 to output 1. In that case the Epsilon can be useful.

Note that raw signals will never go above 1.0 or below 0.0, and does not wrap around.
-----
53:Clamp
Clamp the input signal to a given minimum and maximum value.

To invert the clamp, set the maximum to a lower value than the minimum, the input signal will then be clamped outside of the range.
-----
54:Toggler
Whenever a bit of 1 is read from <b><tt>IN0</tt></b>, the output stream is toggled.

Example:
<span font_family="monospace" background="white">0001001000010</span> -> <span font_family="monospace" background="white">0001110000011</span>

Use in combination with the sparsifier and the effect on control panel buttons is a "checkbox" that can be toggled on/off.
-----
55:FIFO
First-in-first-out queue with an initial buffer of 8 extra 0-signals.
-----
56:Moving Average
Output a value according to:

<span font_family="monospace" background="white">I := xa + I(1-a)</span>

Where <span font_family="monospace" background="white">x</span> is the input signal, <span font_family="monospace" background="white">I</span> is the internal value and <span font_family="monospace" background="white">a</span> is a weight factor.

<span font_family="monospace" background="white">I</span> is always initially 0.

Example usage:
Connect a Moving Average component to a Floor component, the input value of the system will "charge" for some time depending on the Moving Average's weight factor, before a 1 is output.
-----
57:0-Reset M.Avg.
Identical to Moving Average, but resets itself if an input signal of exactly 0 is received:

<span font_family="monospace" background="white">
I: = / x > 0 : xa + I(1-a)
     \ x = 0 : 0
</span>

Where <span font_family="monospace" background="white">x</span> is the input signal, <span font_family="monospace" background="white">I</span> is the internal value and <span font_family="monospace" background="white">a</span> is a weight factor.
-----
58:Debugger
Forward <b><tt>IN0</tt></b> to <b><tt>OUT0</tt></b> and light up a lamp depending on the value of the signal. Fully lit means the signal is 1.0.
-----
59:Robot
Light, hollow Robot that can step on Command Pads to receive commands. For puzzle levels, the level is completed if any robot steps on a Goal pad. Can be played in Adventure levels.

Weapon: Arm gun that shoots bullets.
Special Ability: Becoming a box that mitigates damage.
-----
60:Sticky Note
Sticky note with custom text, place them on the wall to add hints to other players. Click the configuration button to modify the text on the sticky note.

Sticky notes are limited to 7 sticky notes in a level. Adding any more through level hacking will crash the game.
-----
61:Plastic Cup
Plastic cup with no real purpose. Throw some balls in it.
-----
62:Dummy
A crash test dummy. You know what to do with him.
-----
63:Breadboard
A piece of wood where you can attach many electronic components to build a circuit board. You don't want your devices to fly around randomly do you? That's what I thought. So place them on the breadboard.
-----
64:Command pad
When a Robot steps on the command pad, he will receive and obey the given message. <b><tt>IN0</tt></b>: Activate, by default on if no cable is connected.

<b><big>Available commands:</big></b>
<b><tt>Stop</tt></b>: Stops the robot.
<b><tt>Start/Stop toggle</tt></b>: If <b><tt>IN0</tt></b> is connected and is <b><tt>0</tt></b>, stop the robot. If <b><tt>IN0</tt></b> is <b><tt>1</tt></b>, start the robot. If <b><tt>IN0</tt></b> is not connected, toggle the robots current start or stop value.
<b><tt>Left</tt></b>: Changes the robots direction to <b>left</b>.
<b><tt>Right</tt></b>: Changes the robots direction to <b>right</b>.
<b><tt>Left/Right toggle</tt></b>: Toggles the robot direction.
<b><tt>Jump</tt></b>: Commands the robot to jump. Slider sets with what strength the robot jumps.
<b><tt>Aim</tt></b>: Commands the robot to aim its weapon in a particular angle.
<b><tt>Attack</tt></b>: Commands the robot to attack.
<b><tt>Layer up</tt></b>: Commands the robot to move one layer up.
<b><tt>Layer down</tt></b>: Commands the robot to move one layer down.
<b><tt>Increase speed</tt></b>: Commands the robot to increase its speed depending on the slider value.
<b><tt>Decrease speed</tt></b>: Commands the robot to decrease its speed depending on the slider value.
<b><tt>Set speed</tt></b>: Sets the robots speed depending on the slider value.
<b><tt>Full health</tt></b>: Gives the robot full health. Has the same texture as the Goal object, which might make the player confuse it with a Goal object.
-----
65:Goal
Goal for the robot. When the robot steps on the goal, the level is won. Also see the Game Manager if you would like to create a points-based system instead.
-----
66:Game Manager
Various I/O to control level completion and scoring.

The game ends if a value of 1 is sent to either <b><tt>IN0</tt></b> or <b><tt>IN1</tt></b>. If the game is lost, no highscore is saved.

The game may also end automatically if the final score is reached.

<u>NOTE:</u> <b><tt>OUT0</tt></b> can be used to check whether the final score has been reached. You may want to use a Floor component to filter this value before you pass it on to binary devices, otherwise a value of 0.5 (half final score reached) will be interpreted by the binary device as a value of 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>:  Player wins the game
<b><tt>IN1</tt></b>:  Player loses the game
<b><tt>IN2</tt></b>:  Score +1
<b><tt>IN3</tt></b>:  Score +50
<b><tt>IN4</tt></b>:  Score +100
<b><tt>IN5</tt></b>:  Score +250
<b><tt>IN6</tt></b>:  Score +500
<b><tt>IN7</tt></b>:  Score -1
<b><tt>IN8</tt></b>:  Score -50
<b><tt>IN9</tt></b>:  Score -100
<b><tt>IN10</tt></b>: Score -250
<b><tt>IN11</tt></b>: Score -500
<b><tt>IN12</tt></b>: Restart Level
<b><tt>OUT0</tt></b>: Output current score as a fraction: <span font_family="monospace" background="white">current_score/max_score</span>. If there is no max score, 0 is always output.
-----
68:Rubber Beam
A black rubber beam with very high friction, medium-low bounciness and medium density.

Same building capabilities as the regular wooden plank.

Its restitution (bounciness) and friction can be configured in its properties dialog if the level version is high enough.
-----
70:Corner
Wooden corner piece for thick planks.
-----
71:Laser
A device that emits light at the given wavelength. If the wavelength is set above 0, it will damage robots.

To detect if something crosses the laser beam, place a Laser sensor to receive the beam.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate, by default 1.0 if no cable is connected.
-----
72:Tiltmeter
Output the angular displacement of the tiltmeter relative to its standing position.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Counter-clockwise rotation. 0.0 is no rotation, 1.0 is 180 degrees.
<b><tt>OUT1</tt></b>: Clockwise rotation. 0.0 is no rotation, 1.0 is 180 degrees.
-----
73:Thruster
Same characteristics as a Rocket, but with a smaller engine capacity. Activated by default with a thrust multiplier of 1 if no cable is connected.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Thrust multiplier
-----
74:Rocket
Rocket with an optional signal input to control the thrust. Activated by default with a thrust multiplier of 1 if no cable is connected.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Thrust multiplier
-----
75:Proximity sensor
Measures the distance to the closest object. The value sent to <b><tt>OUT0</tt></b> is equal to <span font_family="monospace" background="white">1.0-D/L</span> where <span font_family="monospace" background="white">D</span> is the real distance to the object and <span font_family="monospace" background="white">L</span> is the range of the sensor (see Length slider).

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Inverted distance according to <span font_family="monospace" background="white">1.0-D/L</span>
-----
76:Y-splitter
Forwards the value from its input port to both its output ports.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value
<b><tt>OUT0</tt></b>: Unmodified value of IN0
<b><tt>OUT1</tt></b>: Unmodified value of IN0
-----
77:Value shift
Add a constant value to IN0 and wrap around. This essentially "shifts" where 0 and 1 is.
-----
78:Toggle Button
Mechanical re-usable button. Toggles its output value when pressed, starting at 0.

You can use a Sparsifier+ device to output 1 for a single tick each time the button is pressed, regardless of its state.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Button state output
-----
79:IF gate
If binary value of <b><tt>IN1</tt></b> is 1.0, out the unmodified value of <b><tt>IN0</tt></b> to <b><tt>OUT0</tt></b>.

The input IN1 is binary, its value is rounded so any value above 0.5 is equal to 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value
<b><tt>IN1</tt></b>: Condition
<b><tt>OUT0</tt></b>: IF IN1 THEN IN0 ELSE 0
-----
80:ID field
Reports when a specific object is inside the field.  Will report 1.0 when the targeted object enters the field, otherwise it will report 0.0.

Use the crosshair button to select an object which object the field detects.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Detection status
-----
81:Interactive Cylinder
An interactive version of the Cylinder.

Interactive objects can be interacted with using the mouse/finger if any of these criteria are met:
a) it is within the range of a Dragfield.
b) it is within the range of the Adventure Robot.
c) the "Do not require dragfields" level property is enabled.
-----
82:Dragfield
Makes all interactive objects within the given field moveable by the player.
-----
83:Emitter
The emitter will emit copies of a selected object. Copies will be emitted as long as 1.0 is received through IN0, or if IN0 is unplugged. For every time an object is emitted, 1.0 is written to <b><tt>OUT0</tt></b>.

Use the crosshair button to select which object will be emitted. Not all objects can be emitted. The emitted objects will have the exact same properties as the selected object. It is safe to remove the object you selected for the emitter to copy.

Use the slider to configure the minimum interval between two consecutive emits. Alternatively, you can wire IN0 to a Timer object for better control. If you use a timer, it is recommended to set the emitters own interval to as low as possible to avoid missing ticks from the timer.

If something is obstructing the emitter, the emitter will fail to emit.

Objects that can be emitted:
Ball, metal ball, cylinder, interactive cylinder, interactive box, interactive ball, any type of robot, corner, dummy, land mine, bomb, wooden box, weight.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Emit signal
<b><tt>OUT0</tt></b>: 1.0 when an object was emitted.
-----
84:Land mine
An explosive. Use the slider on the screen to specify impact threshold the land mine can withstand before exploding. The explosion will effect all layers unless the level property "Single-layer explosives" is enabled.
-----
85:Bomb
An explosive. Use the slider on the screen to specify the delay before the bomb explodes. The explosion will effect all layers unless the level property "Single-layer explosives" is enabled.
-----
86:Absorber
The absorber absorb absorbable objects. The object cannot have any connections, or it will not be absorbed.

Use the crosshair button to select what object can be absorbed. If no object is selected, any of the follow objects can be absorbed:
Ball, metal ball, cylinder, interactive cylinder, interactive box, interactive ball, any type of robot, corner, dummy, land mine, bomb, wooden box, weight.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Absorb signal
<b><tt>OUT0</tt></b>: 1.0 when an object was absorbed.
-----
87:Timer
A timer ticks a value of 1.0 at a a defined interval, for a specified number of times. Click the configration button to set how many times and at what interval the timer should tick.

Send a single value of 1.0 to IN1 to reset the timer, or a continuous stream of 1 to stop it.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Start (default = on).
<b><tt>IN1</tt></b>: Reset
<b><tt>OUT0</tt></b>: Timer tick
<b><tt>OUT1</tt></b>: Timer status (1.0 if the timer is stopped or was reset)
-----
88:Mini emitter
Small emitter that can be attached to objects. 

Objects that can be emitted:
Ball, metal ball, corner, land mine, bomb, interactive ball.

The mini emitter can also emit Interactive Box and the wooden Box, but only if the box's size is set to the smallest.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Emit signal
<b><tt>OUT0</tt></b>: 1.0 when an object was emitted.
-----
89:Mini absorber
Small absorber that can be attached to objects. 

Objects that can be absorbed:
Ball, metal ball, corner, land mine, bomb, interactive ball.

The mini absorber can also absorb Interactive Box and the wooden box, but only if the box's size is set to the smallest.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Absorb signal
<b><tt>OUT0</tt></b>: 1.0 when an object was absorbed.
-----
90:Conveyor
Any object resting on the conveyor belt will be moved according to the conveyor's speed.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Speed multiplier
<b><tt>IN1</tt></b>: Invert direction
-----
91:Electromagnet
A magnet similar to the Magnet object, but its strength is controlled by IN0.
-----
92:Plastic Beam
A plastic beam with customizable color.

Material:
Plastic, slightly bouncy, low friction.

Sublayer depth: 2
-----
93:Box
A wooden box. Can be attached to objects in adjacent layers.

Material:
Light wood, slightly bouncy, low friction.

Sublayer depth: 2
-----
94:EC Resistor
Electronically controlled resistor. Use IN1 to control the resistance.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Incoming power
<b><tt>IN1</tt></b>: Amount of resistance
<b><tt>OUT0</tt></b>: Outgoing power
-----
95:Rubberband
Elastic rubber band. Adjust the sliders to change the reaction lenght and coefficient.
-----
97:Angular damper
Attempts to return to its idle position by applying forces.
-----
98:Object finder
The object finder locates a specific object. Use the crosshair button to select which object the object finder is tracking.

Please note that the reported angle is the relative angle. If the object finder itself is rotated, the reported angle is with respect to the angle of the object finder. You can use gyroscopes and wrap sub/add to convert between relative/absolute angles.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Angle
<b><tt>OUT1</tt></b>: Distance fraction
-----
99:Pressure sensor
Outputs a total of all objects pushing/pressing on the sensor.

Use the Threshold slider to set the maximum pressure value. This will be the value corresponding to 1.0 through <b><tt>OUT0</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Pressure value between 0.0 and 1.0
-----
100:sincos
Converts an angle via <b><tt>IN0</tt></b> to one positive y-value, one positive x-value, one negative y-value, and one negative x-value;

An angle signal is a value between 0 and 1 where 0.5 corresponds to 180 degrees.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Angle, the angle which will be converted to four x/y-values.
<b><tt>OUT0</tt></b>: Positive Y
<b><tt>OUT1</tt></b>: Positive X
<b><tt>OUT2</tt></b>: Negative Y
<b><tt>OUT3</tt></b>: Negative X
-----
101:Sine wave
An electronic device that outputs a smooth repetitive oscillation.

Properties:
Frequency Hz: Determines how fast the signal oscillates.
Phase: Determines where in the sine wave it begins.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Outputs the current value of the oscillation.
-----
102:Random
Outputs a random value between 0.0 and 1.0 to <b><tt>OUT0</tt></b>.

You can use a Memory object to save a single random value.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Random value between 0.0-1.0.
-----
103:Memory module
Stores a value in its buffer which is output to <b><tt>OUT0</tt></b>. The value is read from <b><tt>IN1</tt></b>, and a signal from <b><tt>IN0</tt></b> sets the buffer value to the value read from <b><tt>IN0</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Set, a signal above 0.5 sets the buffer value to the <b><tt>IN1</tt></b> value.
<b><tt>IN1</tt></b>: Input, the value which will be stored in the buffer if <b><tt>IN0</tt></b> is true.
<b><tt>OUT0</tt></b>: The buffer value
-----
104:Gravity Manager
Manages the global gravity. Use IN0 and IN1 to set the gravity based on angle and force. Modify the gravity multiplier with IN2.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Angle
<b><tt>IN1</tt></b>: Force
<b><tt>IN2</tt></b>: Active (+ modifier)
-----
105:Gravity setter
Use the on-screen sliders to specify what the gravity should be set to. Only one gravity setter should be active at the same time, otherwise the gravity will be undefined.

A cable needs to be plugged into the gravity setter and output a non-zero value to be activated. For example:

Sending a signal of 0.5 to the Gravity setter will set the gravity to the values set with the on-screen sliders, and halve them. (0, -20 with 0.5 multiplier would result in 0, -10 gravity)

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Gravity multiplier
-----
106:Sawtooth
An electronic device that outputs a sawtooth signal. A sawtooth signal ramps up from 0 to 1 and then abruptly drops to 0 and repeats again.

Properties:
Frequency Hz: Determines how fast the signal oscillates.
Phase: Determines where in oscillation motion it begins.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Outputs the current value of the oscillation.
-----
107:Jumper
Plug this into a signal socket to set the signal to a constant value.
-----
108:Interactive Box
An interactive version of the Box.

Interactive objects can be interacted with using the mouse/finger if any of these criteria are met:
a) it is within the range of a Dragfield.
b) it is within the range of the Adventure Robot.
c) the "Do not require dragfields" level property is enabled.
-----
109:Interactive Ball
An interactive version of the Box.

Interactive objects can be interacted with using the mouse/finger if any of these criteria are met:
a) it is within the range of a Dragfield.
b) it is within the range of the Adventure Robot.
c) the "Do not require dragfields" level property is enabled.
-----
110:Half unpack
Invert a half pack.

If IN0 > 0.5:
  OUT0: 0
  OUT1: (IN0-0.5) * 2
else
  OUT0: (IN0) * 2
  OUT1: 0
-----
111:Half pack
Pack two mutually exclusive values, for example a positive and a negative X value, or the output of a Tiltmeter, into a single value.

OUT0 = / IN1 > 0 : 0.5 + IN1*.5
       \ IN1 = 0 : IN0*.5
-----
112:atan2
Converts one positive y-value, one positive x-value, one negative y-value, and one negative x-value to an angle which is output to <b><tt>OUT0</tt></b>.

An angle signal is a value between 0 and 1 where 0.5 corresponds to 180 degrees.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Positive Y
<b><tt>IN1</tt></b>: Positive X
<b><tt>IN2</tt></b>: Negative Y
<b><tt>IN3</tt></b>: Negative X
<b><tt>OUT0</tt></b>: Angle
-----
113:Pointer
Shows a small arrow pointing in the direction of the input angle.

Please note that the direction of the arrow is relative to the pointer object itself. Use a gyroscope and a wrap sub device to convert an absolute angle to a relative angle.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Angle
-----
114:Spikes
A deadly beam with spikes that damages any living entity.
-----
115:Object field
Detects an object of a specific type. All objects of the target type will be detected by the field. When an object of the target type enters the field, 1.0 is reported through OUT0, otherwise 0.0 is reported.

Use the crosshair button to select an object. For example, select a metal ball and all metal balls will trigger the object field. The object field ignores properties such as the size of cylinders.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Detection status
-----
116:Sum
Output the sum of its two inputs.

Note: All values are clamped between 0 and 1. To wrap the result, see Wrap Add.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: A + B
-----
117:Signal clip
Cable clip for signal cables (red cables). The cable clip allows you to drag signal cables along other objects. The signal is passed through the clip without modification.

Both sides of the clip can be attached to other objects.
-----
118:Avg
Outputs the average value of the two inputs.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: (A + B) / 2.0
-----
119:muladd
Combined multiply and add. Useful for scaling the signal window to a specific floating point range. For example, multiply by 0.5 and add 0.25 to scale the signal window to a value between 0.25 and 0.75.

<span font_family="monospace" background="white"><b>OUT0</b> = <b>IN0</b> * a + b</span>

Set 'a' and 'b' using the on-screen sliders.
-----
120:Gear
Unused gears with odd collision. It has 4 different configurable sizes.
-----
121:Cam Marker
Place this where you want a screenshot to be taken for when you publish the level to the community site. The config button lets you see exactly how the screenshot will look. This object is not visible when playing.
-----
122:Pixel
A plastic box with customizable color fixed to the background wall.

The Pixel's alpha channel is the frequency it listens on, and it changes its size after the value that is transmitted.
-----
123:Receiver
Listens for a signal on the given frequency.

The receiver will differentiate between broadcast signals and transmitter signals, and prefer transmitter signals. That means if a broadcaster is broadcasting a value of 0.5 over the receivers frequency, and a transmitter is transmitting the value 1.0, the receiver will receive 1.0.
-----
124:Transmitter
Transmit a signal over a frequency.

If <b><tt>IN1</tt></b> is used, the used frequency is shifted by +<b><tt>IN1</tt></b>*10 rounded to the nearest whole value.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: The signal to transmit.
<b><tt>IN1</tt></b>: Frequency shift.
-----
125:Broadcaster
Broadcast a signal over a range of frequencies.

If a value other than 0 is receiver through <b><tt>IN1</tt></b>, the frequency range is shifted by +<b><tt>IN1</tt></b>*10 rounded to the nearest whole value.

If multiple broadcasters broadcast over the same frequencies, what value a receiver would pick up is undefined. A transmitter transmitting on a frequency in a broadcasters frequency range will override the broadcast value.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: The signal to broadcast.
<b><tt>IN1</tt></b>: Frequency shift.
-----
126:Fan
Connect the fan to a power source (battery or power supply) using a white power cable. Air flow will affect nearby objects and the fan itself.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Power source.
-----
127:Min
Output the unmodified smallest value of <b><tt>IN0</tt></b> or <b><tt>IN1</tt></b> to <b><tt>OUT0</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: IF (A < B) THEN A ELSE B
-----
128:Max
Output the unmodified biggest value of <b><tt>IN0</tt></b> or <b><tt>IN1</tt></b> to <b><tt>OUT0</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: IF (A > B) THEN A ELSE B
-----
129:Backpack
Adventure robots can connect to the backpack by walking close to it and clicking on it.

In earlier versions (pre-1.5) the Backpack was required to make the robot able to interact with RCs. This is no longer the case, but despite that it's still a pretty useful object. For instance, it can be utilized to make the robot able to push and pull objects using the backpack.
-----
130:Stabilizer
Connect this to a group of objects that need some sort of stabilization. Having more than one stabilizer connected to a group causes undefined behaviour. This object should be used sparsely. Having the sliders set high will cause the object to float in a very unrealistic manner.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Angular damping
<b><tt>IN1</tt></b>: Linear damping
-----
131:Pkg Warp
Play a specific level in the current package. Use the configuration button to set which level index to play. The level index of a level is the position of the level in the list of levels in the package, level index 0 being the first level.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate, when a rounded value of 1.0 is read here, the warp is initiated.
-----
132:Pkg Status
Get the status details for a level in the current package. Use the configuration button to specify which level to query info about. The level index of a level is position of the level in the list of levels in the package, level index 0 being the first level.

To check absolute completion status, please wire <b><tt>OUT0</tt></b> to a floor component.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Percent completed. 1.0 if the level has been completed, otherwise top_score/final_score or 0.0.
<b><tt>OUT1</tt></b>: Unlock status. Returns 1.0 if the level is unlocked according to the package unlock count.
<b><tt>OUT2</tt></b>: 1.0 if this level was the last played level before the current one.
-----
133:Cam Targeter
Focus the camera on an object. Use the object selection to specify which object to focus on. Use the configuration button to configure whether the camera snaps to, moves to or follows the object relatively from its current position.

The targeter is activated when a value of 1.0 is read through <b><tt>IN0</tt></b>, or automatically by default if no plug is connected.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
-----
134:Condenser
Stores an internal value of the sum of all previous values read from IN0, minus all previous values read from IN1. The internal value is then divided by the maximum value and written to <b><tt>OUT0</tt></b> as a fraction.

This object can be used as a "health meter". Use <b><tt>IN1</tt></b> to decrement the health, and <b><tt>IN0</tt></b> to increment. Wire <b><tt>OUT0</tt></b> to a ceil device and whenever the result is 0.0, all health is gone.
-----
135:FX Emitter
Display special effects depending on the values specified in its config menu. The FX Emitter can display four effects simultaneously.

Explosion - An explosion effect, similar to that of the land mine and bomb.
Highlight - Highlights any connected object, depending on the radius and count.
Smoke - Black smoke
Magic - Sparks of magic
Break - A very subtle breaking effect.
Destroy connections - Destroys any already-destructible objects connected to the FX emitter, subject to the Radius and Count variables.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
<b><tt>OUT0</tt></b>: Outputs a 1 when the effects have finished.
-----
136:Mul
Output the product of its two inputs.

Note: All values are clamped between 0 and 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: A * B
-----
137:RC Micro
A tiny control panel with support for 1 output signal.

See RC Basic for a detailed description of what control panels are capable of.
-----
138:Sub
Subtract a constant value given from the on-screen slider from <b><tt>IN0</tt></b> and output the result to <b><tt>OUT0</tt></b>.
-----
139:Mini transmitter
A miniature version of the Transmitter, that is only able to transmit signals over a single frequency.

Multiple transmitters can be used on the same frequency, the one sending a non-zero value will take precedent over the others. If multiple transmitters are transmitting non-zero values at the same time, which value is actually transmitted is undefined.
-----
140:Checkpoint
An adventure mode object. If the <b><tt>IN0</tt></b> receives a signal above 0.5, this checkpoint is activated. This means if and when the Adventure robot is killed, this is the Checkpoint on which the robot will respawn. The checkpoint can also be activated by having the Adventure robot stepping on it.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
<b><tt>OUT0</tt></b>: Outputs a single 1 if the robot respawns on this checkpoint.
<b><tt>OUT1</tt></b>: Active status. Outputs 1 if this is the current checkpoint in use.
-----
141:Spikebot
Enemy bot with dangerous spikes as weapon.

Can be configured with the configuration button.
-----
142:Companion
Friendly robot that follows you around to keep you company.
-----
143:Bomber
Enemy bot that shoot land mines.

Can be configured with the configuration button.
-----
144:Impact sensor
When an impact occurs, for example an object collided with the sensor, a value is sent through <b><tt>OUT0</tt></b>.

Use the Threshold slider to set the maximum impact value. This will be the value corresponding to 1.0 through <b><tt>OUT0</tt></b>.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Impact value between 0.0 and 1.0
-----
145:Lobber
Bot that lob bombs toward enemies. Watch out!

Can be configured with the configuration button.
-----
146:HP Control
Controls the HP of a robot.

The robots current HP can be read from <b><tt>OUT0</tt></b>. To set the HP of a robot, set <b><tt>IN0</tt></b> to 1.0 and <b><tt>IN1</tt></b> to the desired HP percentage.

<b><big>Socket information:</big></b>
<b><tt>IN0:</tt></b> Activate
<b><tt>IN1:</tt></b> New HP
<b><tt>OUT0:</tt></b> Current HP
-----
147:Laser (Duplicate)
Unused duplicate Laser object.
-----
148:Multi-emitter
Emit an exported object. Objects can be exported from the multi-select mode in the editor.
-----
149:Simple Motor
A simple motor that is good for simple electronics. Power this motor by connecting it to a power source (white cable). To control its speed or on/off state, you can also connect it to a signal cable (red cable).

<b><big>Characteristics:</big></b>
* High maximum speed
* Low torque
* No engine braking

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: TODO
<b><tt>OUT0</tt></b>: TODO
-----
150:Angular velocity meter
This device reports the current angular velocity of itself.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Counter-clockwise angular velocity
<b><tt>OUT1</tt></b>: Clockwise angular velocity
-----
151:Laser bouncer
Bounces laser beams, it's essentially a mirror.
-----
152:Laser sensor
Detects laser beams.

Outputs 1 to <b><tt>OUT0</tt></b> if a laser with the correct wavelength hit the sensor.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Laser status
-----
153:Velocity meter
Reports the velocity if itself as an angle and a speed fraction.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Angle
<b><tt>OUT1</tt></b>: Speed fraction
-----
154:Wrap Add
Output the sum of <b><tt>IN0</tt></b> and <b><tt>IN1</tt></b> to <b><tt>OUT0</tt></b>, and wrap around if the sum is above 1.0. For example, 0.75 + 0.5 = 0.25.
-----
155:Wrap Sub
Subtract <b><tt>IN1</tt></b> from <b><tt>IN0</tt></b> and output the result to <b><tt>OUT0</tt></b>. If the result is below 0.0, it is wrapped around. For example, 0.1 - 0.2 = 0.9.
-----
156:Event Listener
Listens to the event specified with the config menu and outputs a 1 to <b><tt>OUT0</tt></b> whenever the event occured.

Available events:
* (0) Player die - The adventure robot is killed.
* (1) Enemy die - Any robot other than the adventure robot is killed.
* (2) Interactive object destroyed - Any interactive object is destroyed.
* (3) Player respawn - The adventure robot respawns.
* (4) Touch/Mouse click - The player clicks somewhere on the screen.
* (5) Touch/Mouse release - The player releases that click.
* (6) Any absorber activated - As specified, when any absorber on the level is activated.
-----
157:Passive display
Displays a matrix of 5x7 lights forming configurable symbols. The current symbol pointer can be increased and decreased using <b><tt>IN1</tt></b> and <b><tt>IN2</tt></b>. <b><tt>IN0</tt></b> controls whether the display is on or off. By default if no cable is connected to <b><tt>IN0</tt></b>, the display is on. By default, the display contains 36 symbols, 0-9 followed by A-Z.

Symbols can be customized by clicking the configuration button.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: ON/OFF (default ON)
<b><tt>IN1</tt></b>: Increment symbol pointer
<b><tt>IN2</tt></b>: Decrement symbol pointer
-----
158:Ceil
If the input value is anything other than exactly 0, output 1.

Any raw signal other than exactly 0.0 is treated as 1.0. For example, 0.00001 is treated as 1.0.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Input signal
<b><tt>OUT0</tt></b>: Result of a ceil operation to <b><tt>IN0</tt></b>
-----
159:RC Activator
Remotely activate an RC. Use the crosshair button to select the target RC.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate RC
<b><tt>OUT0</tt></b>: 1.0 if the RC is currently activated
-----
160:Cursor finder
Outputs the angle and distance to the cursor, or if on a mobile device, to the first finger that's pressed down on the screen. The angle and distance are saved, so it can be used as a "last touch position" for mobile devices.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Angle
<b><tt>OUT1</tt></b>: Distance
-----
161:Auto Absorber
The auto absorber will follow all connections it can find and absorb everything reachable. This is useful for absorbing big complex objects in one go.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate absorber
-----
162:Wrap distance
Outputs the absolute wrapped nearest distance between <b><tt>IN0</tt></b> and <b><tt>IN1</tt></b>. For example, the distance between 0.1 and 0.9 is 0.2.
-----
163:Weight
A non-attachable trapezoid with a customizable weight. Great for weighing down objects.
-----
164:Decay
Adds any non-zero input value to its internal value. Each tick its internal value is multiplied by the amount given in the on-screen slider.

If <b><tt>IN0</tt></b> is non-zero, add it to its internal value (<span font_family="monospace" background="white">cur_value</span> += <b><tt>IN0</tt></b>). Each tick, multiply <span font_family="monospace" background="white">cur_value</span> by the <span font_family="monospace" background="white">decay_rate</span> set with the on-screen slider. <span font_family="monospace" background="white">cur_value</span> is clamped between 0 and 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Set value
<b><tt>OUT0</tt></b>: <span font_family="monospace" background="white">cur_value</span>
-----
165:Cam Zoomer
Zooms the players camera to the level specified with the first slider.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate. (On by default if no plug present)
-----
166:Time Ctrl
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

Slow down time according to the input value.

Time can NOT be stopped completely since that would stop all electronics from running and prevent you from starting time again. An epsilon value of 0.01 is added as the minimum time speed.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Multiply time speed by (1.0-<b><tt>IN0</tt></b>) + EPS
-----
167:Prompt
Upon receiving a signal of 1 to <b><tt>IN0</tt></b>, a customizable dialog will be shown to the player. Use the config dialog to specify the details of the dialog. Use the output sockets to receive signals for which option the user selected.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate. It's recommended to use limit or sparsifier to this input.
<b><tt>OUT0</tt></b>: Button 1 pressed
<b><tt>OUT1</tt></b>: Button 2 pressed
<b><tt>OUT2</tt></b>: Button 3 pressed
-----
168:Grapher
Forward <b><tt>IN0</tt></b> to <b><tt>OUT0</tt></b> and represent the value from <b><tt>IN0</tt></b> on the display in graph form.
-----
169:Wrap condenser
Same properties as a Condenser, but the value will wrap around.
-----
170:IF-else
If binary value of <b><tt>IN1</tt></b> is 1.0, out the unmodified value of <b><tt>IN0</tt></b> to <b><tt>OUT1</tt></b>, else out it to <b><tt>OUT0</tt></b>.

The input IN1 is binary, its value is rounded so any value above 0.5 is equal to 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value
<b><tt>IN1</tt></b>: Condition
<b><tt>OUT0</tt></b>: IF NOT IN1 THEN IN0 ELSE 0
<b><tt>OUT1</tt></b>: IF IN1 THEN IN0 ELSE 0
-----
171:cmp-e
Outputs 1 if the two inputs are equal, otherwise output 0.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: IF (A == B) THEN 1 ELSE 0
-----
172:cmp-l
Outputs 1 if the <b><tt>IN0</tt></b> input value is less than the <b><tt>IN1</tt></b> input value, otherwise output 0.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: IF (A &lt; B) THEN 1 ELSE 0
-----
173:cmp-le
Outputs 1 if the <b><tt>IN0</tt></b> input value is less than or equal to the <b><tt>IN1</tt></b> input value, otherwise output 0.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value A
<b><tt>IN1</tt></b>: Value B
<b><tt>OUT0</tt></b>: IF (A &lt;= B) THEN 1 ELSE 0
-----
174:SFX Emitter
Plays one of the preset sound effects.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
<b><tt>IN1</tt></b>: Volume control
-----
175:Synthesizer
An electronic device which creates sounds based on its settings and electronic inputs.

<b><big>Types of sounds:</big></b>
* Waveform - How the emitted sound will oscillate
  * Sine Wave
  * Sawtooth (great for string and brass sounds)
  * Square Wave (great for percussive instruments)
  * Pulse Wave (same as square wave, but with a customizable width)
  * Triangle Wave
* Base Frequency - The frequency at which the synthesizer will emit its sound.
* Peak Frequency - The highest frequency at which the synthesizer can emit its sound. This is only relevant when <b><tt>IN1</tt></b> is used.
* Bitcrushing - Produces a distortion effect by reducing the resolution of the sound.
* Frequency Vibrato Hz - Specifies at what speed the frequency vibrato should be applied.
* Frequency Vibrato Extent - To what extent the frequency should vibrate.  Assuming a base frequency of 220, a Frequency Vibrato Extent of 0.1 will make the sound vibrate between 220-(220*0.1) and 220+(220*0.1).
* Volume Vibrato Hz - Specifies at what speed the volume vibrato should be applied.
* Volume Vibrato Extent - How much the volume will shift.
* Pulse Width - Only used with the Pulse Wave. Specifies the width of the pulse. The width of a square wave is 0.5 (50%) for reference.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Volume (1.0 by default)
<b><tt>IN1</tt></b>: Frequency shift. (base frequency + (peak frequency - base frequency) * <b><tt>IN1</tt></b>)
-----
176:Var getter
Get a value associated with the specified name. The value is persistant between playthroughs. Use the config dialog to set the variable name.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Value
-----
177:Var setter
Store a value and associate it with a name. This value is persistant between playthroughs. Use the config dialog to set the variable name.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Set
<b><tt>IN1</tt></b>: Value
-----
178:Snap
Outputs a snapped value of the input value. The amount of steps is specified by the on-screen slider.
-----
179:Sequencer
Traverses over its given sequence at the given speed, outputting the value to OUT0.

The number of steps is calculated by the number of zeroes and ones in the "Sequence" field of its config dialog. The step width values work similar to the timer, meaning when the time specified has been reached, the sequencer will step one step forward in its sequence. The Wrap around option specifies whether or not the sequence should repeat once it has reached its end.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate (on by default)
<b><tt>OU0</tt></b>: The current signal to output, whether its current step in the sequence is a 1 or a 0.
-----
180:Shape Extruder
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

Attach this object to another object, the shape extruder will expand the sides of the other shape. The expanded area collides only with dynamic objects, and does not collide with static objects such as platforms, pixels, etc.

Use the Shape Extruder to prevent very fast moving objects from passing through each other.
-----
181:Linear Decay
Adds any non-zero input value to its internal value. Each tick its internal value is subtracted by the amount given in the on-screen slider.

If <b><tt>IN0</tt></b> is non-zero, add it to its internal value (<span font_family="monospace" background="white">cur_value</span> += <b><tt>IN0</tt></b>). Each tick, subtract <span font_family="monospace" background="white">cur_value</span> by the <span font_family="monospace" background="white">decay_value</span> set with the on-screen slider.
<span font_family="monospace" background="white">cur_value</span> is clamped between 0 and 1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Set value
<b><tt>OUT0</tt></b>: <span font_family="monospace" background="white">cur_value</span>
-----
182:Limit
An electronic device that can be used to limit how many ticks of 1 can be passed through it.

Useful for limiting how many times a Prompt can be activated.

Since this is a binary device, the input value is rounded so any value above 0.5 is equal to 1.
-----
183:Cursor field
Triggered by cursors or finger inside its field. Great for in-game buttons.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Player clicked inside field
<b><tt>OUT1</tt></b>: Player currently dragging cursor/finger inside the field
<b><tt>OUT2</tt></b>: Cursor hovering above the field (not implemented yet)
-----
184:Lua Script
Lua Script object, create your own objects by scripting them. To learn more about Lua scripting, just search Google for Lua.

The standard Lua math library is available through the global 'math'. For example, math.floor(x), math.sin(a).

Visit the wiki at wiki.principiagame.com to read more about Lua scripting in Principia.

Below is a list of Principia-specific Lua stuff.

Global objects and their methods:

== this - a reference to the script object itself ==
this:read(x)   - read INx where x is any of the 4 available sockets
this:write(x, v)  - write value v to OUTx, will be clamped between 0 and 1
this:write_frequency(frequency, value) - write value to frequency
this:listen_on_frequency(frequency) - begin listening to frequency. can only be done on first run
this:read_frequency(frequency) - read value from frequency (must have started listening)
this:first_run() - returns true if this is the first time the script is run
this:get_position() - returns an array with the position [x, y] of the luascript object 

For sprite rendering functions, see the Sprite Rendering section below.

== game - game stuff ==
game:show_numfeed(x) - show the number X on the screen (for debugging) 
game:finish(success) - finishes the game with the desired state. 1 = win, 0 = lose
game:add_score(x)    - adds x score to the current score. can be used to decrease score
game:set_score(x)    - sets the score to x
game:get_score()     - gets the current score
game:activate_rc(e)  - activates the entity objects widgets (usable on RCs)
game:activate_rc_by_id(e_id) - activates the widgets for the entity with set id

- game:message(text)
Show a message on the screen with provided text. Use this function sparingly. An optional argument to specify the duration of the message can be provided, set the extra argument to 1 for long duration or 0 for short duration (default).

- game:poll_event(event_id)
Check if an event has happened. Returns true or false depending on whether the event with id event_id has happened since the last electronics tick. See the Event Listener object for available events. The first event has id 0, the next event ID 1, and so on. For example, to check for cursor clicks: game:poll_event(4)

- game:get_cursor(layer)
Get the exact cursor position (first finger or mouse) in the given layer. Returns x and y.

== cam - the camera ==
cam:get_position()    - array of x, y and z
cam:get_velocity()    - array of x and y velocity
cam:set_position(x,y,z)
cam:set_velocity(x,y)
cam:follow_entity(entity, do_snap, preserve_position)
cam:follow_entity_by_id(id, do_snap, preserve_position)

== world - world functions ==

- world:get_entity_by_id(id)
Returns an entity (object) reference or nil of the object does not exist

- world:get_gravity()
Get the world gravity. Gravity is either set in the level properties , the sum of all gravity managers or set by a gravity setter. Returns 2 values, x and y.

- world:raycast(x1, y1, x2, y2, layer)
Raycast from [x1, y1] to [x2, y2] and report the first object that was
detected. Layer can be 1, 2 or 3, where 1 is the inner-most layer.
This function will return 3 values: an entity, the hitpoint, and the
collision normal.

- world:query(min_x, min_y, max_x, max_y, layer)
This function creates a rectangle in the world with lower left corner [min_x, min_y] and upper right corner [max_x, max_y], and then reports all entities that are found inside the rectangle. This function is approximate and might return entities that are slightly outside the rectangle, but it will never miss anything inside.  Returns a table of entities. Layer can be set to 1, 2 or 3, where 1 is the inner-most layer.

The raycast() and query() functions can both be given an optional argument that
specifies the sublayer mask. There are 4 sublayers, their maskvalues are as
follows:
Sublayer 1: 1, Sublayer 2: 2, Sublayer 3: 4, Sublayer 4: 8
By adding the mask values together we can specify which sublayers to search
in, for example if we are searching in sublayers 2 and 4 we provide a sublayer
mask of 10. The default mask value is 15 covering all sublayers.

Classes:

== entity - a reference to a principia object == 
get_id()               - get the unique id
get_g_id()             - get the g_id (type identifier)
get_position()         - array with x and y
get_angle()            - absolute angle 
get_velocity()         - array with x and y velocity
get_angular_velocity() - angular velocity
get_bbox()             - approximate width and height of the object

- get_layer()
Returns the current layer of the entity. Layer 1 is the inner-most layer, layer 3 is the outer-most.

- local_to_world(x,y)
Transform point [x, y] from local coordinates to world coordinates. Returns x and y in world coordinates. local_to_world(0,0) is identical to get_position(), local_to_world(1, 0) would return a world point that is to the right of the entity with respect to the entity's angle.

- world_to_local(x, y)
Transform [x, y] from world coordinates to local coordinates. Opposite of local_to_world(). Returns x and y of the given world point in local coordinates of the entity.

== Sprite Rendering ==
The 'this' object provides a few sprite rendering functions. Each LuaScript object is given its own 128x128 RGBA texture. This texture is initially set to all white but you can set any texel (texture element) value manually. Best practice is to set the texels you need once the first time the script runs and then never modify the texture again.

- this:set_sprite_texel(u, v, r, g, b, a)
Set the texel located at [u, v] where u and v is a coordinate between 0 and 127. The bottom left of the texture is [0, 0].
This function should be called inside a first_run() check to minimize texture bandwidth.

- this:clear_texels()
Clear all texels to black, 0 alpha.

- this:set_sprite_filtering(n)
Set the texel interpolation.
n = 0, disables interpolation
n = 1, enables linear interpolation

- this:set_sprite_blending(n)
Set how sprites are rendered.
n = 0, disable blending (alpha will be unused)
n = 1, foreground - alpha + background - (1-alpha)
n = 2, foreground - alpha + background

- this:set_draw_tint(r,g,b,a)
A color value that will be multiplied by anything drawn by the Lua Script
object (sprites and lines).

- this:set_draw_z(z)
Set the drawing Z.

- this:draw_sprite(x, y, angle, width, height, bx, by, tx, ty)
Draw a sprite at [x, y]. A rectangle of texels will be sampled where [bx, by] is the bottom left of the rectangle and [tx, ty] is the top right.
For example, to render a sprite at [0, 0] using the full available texture:
this:draw_sprite(0.0, 0.0, 0.0, 1.0, 1.0, 0, 0, 127, 127)

- this:draw_line(x1, y1, x2, y2, w)
Draw a line from [x1, y1] to [x2, y2] with line width 'w'. 0.05 is a good
starting point for the line width.
-----
185:Block
A piece of block used for terrain or zappable ores.

Adjust the sliders to change size or material.
-----
187:Oil Rig
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

An oil rig to be used by the adventure robot. Connect the bottom of the oil rig to terrain and the rig will start pumping oil. When the oil rig is full, it emits a barrel of oil. When the ground below is out of oil, the right lamp will start blinking, and you have to move the oil rig to another place.

Take the emitted barrel of oil to a Factory to be able to construct objects requiring oil.

Oil is used to create all plastic objects.
-----
188:Factory
This is where the adventure robot can create things in game. When the Factory is clicked, a menu pops up where you can select what objects to build.

Most objects require oil, see the Oil Rig.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Add to queue
<b><tt>IN1</tt></b>: What to build
<b><tt>IN2</tt></b>: Absorb items without interaction
<b><tt>IN3</tt></b>: Conveyor ON/OFF
<b><tt>IN4</tt></b>: Conveyor invert direction
<b><tt>OUT0</tt></b>: Something was emitted
<b><tt>OUT1</tt></b>: Something was absorbed
<b><tt>OUT2</tt></b>: Error (not enough material)
<b><tt>OUT3</tt></b>: Current build progress
<b><tt>OUT4</tt></b>: Binary, if something is building
-----
189:Crane
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

A crane that can be used to hold big things you are building.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: State control
<b><tt>OUT0</tt></b>: Current state
-----
190:Fluid
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

A fluid restricted to one layer, interacting with sublayers 2 and 3.

There is a hard limit of 4096 fluid particles, when the limit is reached, no more particles will be created.

Please note that fluids are unaffected by the Artifical Gravity object, Fans, explosives, etc.
-----
191:Artifical Gravity
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

Artificial gravity creates a point where other objects will gravitate towards. It can be configured to be either static or dynamic.
-----
192:Auto Protector
Connect this object to a group of objects to prevent the adventure robot from interacting with that group.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Input a value above 0.5 to disable this objects function.
-----
193:Active Display
Displays a matrix of 5x7 lights forming configurable symbols. By default, the display contains 36 symbols, 0-9 followed by A-Z.

This display is active and updates its current symbol every tick according to the value received through IN1. The input value is a fraction where 0 is the first symbol and 1 is the last symbol.

Symbols can be customized by clicking the configuration button.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: ON/OFF (default ON)
<b><tt>IN1</tt></b>: Set symbol
<b><tt>OUT0</tt></b>: Current symbol
-----
194:Plastic Box
A plastic box with customizable color.

Material:
Plastic, slightly bouncy, low friction.
-----
195:Boundary
Functions like a 1-tick FIFO, it prevents unsolvable electronic loops when you have components that depend on eachother.
-----
196:Robot Manager
Controls or outputs information about the selected robot.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Godmode ON/OFF.
<b><tt>IN1</tt></b>: Speed modifier (0.0-1.0). Only enabled if the cable is plugged in. A value of 0.0 means the robot is unable to walk.
<b><tt>IN2</tt></b>: Disable action (useful for disabling box mode until certain powerup is enabled).
<b><tt>IN3</tt></b>: Jump strength multiplier.
<b><tt>IN4</tt></b>: HP increase (heal), value * 10
<b><tt>IN5</tt></b>: HP decrease (damage), value * 10
<b><tt>IN6</tt></b>: Max HP increase, value * 10
<b><tt>IN7</tt></b>: Max HP decrease, value * 10
<b><tt>IN8</tt></b>: Weapon damage multiplier 0.0 = No extra damage, 1.0 = 5 times the damage.
<b><tt>IN9</tt></b>: Toggle robot action.
<b><tt>IN10</tt></b>: Walk left.
<b><tt>IN11</tt></b>: Walk right.
<b><tt>IN12</tt></b>: Stop all movement.
<b><tt>IN13</tt></b>: Jump.
<b><tt>IN14</tt></b>: Aim.
<b><tt>IN15</tt></b>: Attack.
<b><tt>IN16</tt></b>: Attach to nearest backpack/RC
<b><tt>IN17</tt></b>: Detach from any backpack/RC
<b><tt>IN18</tt></b>: Respawn
<b><tt>IN19</tt></b>: Freeze
<b><tt>IN20</tt></b>: Toggle roaming (non-adventure robots only).
<b><tt>IN21</tt></b>: Cycle weapons
<b><tt>IN22</tt></b>: Cycle factions

<b><tt>OUT0</tt></b>: Weapon arm angle
<b><tt>OUT1</tt></b>: Tool arm angle
<b><tt>OUT2</tt></b>: On weapon fire
<b><tt>OUT3</tt></b>: On tool use (experimental)
<b><tt>OUT4</tt></b>: Current layer. 0.0 = layer 1, 0.5 = layer 2, 1.0 = layer 3
<b><tt>OUT5</tt></b>: Head removed
<b><tt>OUT6</tt></b>: Moving left - User attempting to move left (adventure robot only)
<b><tt>OUT7</tt></b>: Moving right - User attempting to move right (adventure robot only)
<b><tt>OUT8</tt></b>: Look dir (left = 0.0, right = 1.0)
<b><tt>OUT9</tt></b>: dir - Last movement dir (left = 0.0, right = 1.0)
<b><tt>OUT10</tt></b>: Action active
<b><tt>OUT11</tt></b>: 1.0 if attached to anything, otherwise 0
<b><tt>OUT12</tt></b>: Movement left feedback (adventure robot only)
<b><tt>OUT13</tt></b>: Movement right feedback (adventure robot only)
<b><tt>OUT14</tt></b>: jump feedback (adventure robot only)
<b><tt>OUT15</tt></b>: aim feedback (adventure robot only)
<b><tt>OUT16</tt></b>: layerup feedback (adventure robot only)
<b><tt>OUT17</tt></b>: layerdown feedback (adventure robot only)
<b><tt>OUT18</tt></b>: action feedback (adventure robot only)
-----
198:Suction Cup
Uses suction force to attach itself to objects.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
<b><tt>OUT0</tt></b>: Outputs 1 if the suction cup is currently attached to an object
-----
199:Sound Manager
Can be used to adjust the volume of a sound or e.g replace it with a different sound using a synthesizer.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Volume
<b><tt>OUT0</tt></b>: Outputs a signal when the selected sound type is played
-----
200:Robot Factory
A factory object that can produce robots.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Add to queue
<b><tt>IN1</tt></b>: What to build
<b><tt>IN2</tt></b>: Absorb items without interaction
<b><tt>IN3</tt></b>: Conveyor ON/OFF
<b><tt>IN4</tt></b>: Conveyor invert direction

<b><tt>OUT0</tt></b>: Something was emitted
<b><tt>OUT1</tt></b>: Something was absorbed
<b><tt>OUT2</tt></b>: Error (not enough material)
<b><tt>OUT3</tt></b>: Current build progress
<b><tt>OUT4</tt></b>: Binary, if something is building
-----
201:Cleaner Bot
Bot that cleans stuff on the ground.
-----
202:Armory
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

Works like factory. Click to build weapons and tools.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Add to queue
<b><tt>IN1</tt></b>: What to build
<b><tt>IN2</tt></b>: Absorb items without interaction
<b><tt>IN3</tt></b>: Conveyor ON/OFF
<b><tt>IN4</tt></b>: Conveyor invert direction

<b><tt>OUT0</tt></b>: Something was emitted
<b><tt>OUT1</tt></b>: Something was absorbed
<b><tt>OUT2</tt></b>: Error (not enough material)
<b><tt>OUT3</tt></b>: Current build progress
<b><tt>OUT4</tt></b>: Binary, if something is building
-----
203:Separator
The Separator has collision on sublayers 2 and 3, meaning that it stops items on sublayers 2 and 3 while letting sublayers 1 and 4 through.

Its color can be changed using level hacking.
-----
204:Background
Unused object which is like the breadboard, but even more in the background.
-----
205:Oil Mixer
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

Works like factory. Click to create oils.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Add to queue
<b><tt>IN1</tt></b>: What to build
<b><tt>IN2</tt></b>: Absorb items without interaction
<b><tt>IN3</tt></b>: Conveyor ON/OFF
<b><tt>IN4</tt></b>: Conveyor invert direction

<b><tt>OUT0</tt></b>: Something was emitted
<b><tt>OUT1</tt></b>: Something was absorbed
<b><tt>OUT2</tt></b>: Error (not enough material)
<b><tt>OUT3</tt></b>: Current build progress
<b><tt>OUT4</tt></b>: Binary, if something is building
-----
206:Repair Station
<b>NOTE: This is a beta object, please be careful when using it as it can have unintended behavior.</b>

Used to repair robots.

Objects can be dragged to the antenna using the builder tool.
-----
207:Guard point
Intended to make roaming robots of the specified faction guard the object.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate guard point (Defaults to disabled when no cable is inserted)
-----
208:Target Setter
Changes the target of a robot within the detection field.

Click the crosshair button to select a target.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Detection status
-----
209:Ladder
Multiple ladders can be attached to each other.
-----
210:Resource
Placeable objects for various adventure resources, which the robot can pick up.
-----
211:Vendor
Click the target button to set what resource the vendor accepts.

The builder tool can be used to drag a resource to the blue antenna.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
<b><tt>IN1</tt></b>: Reset
<b><tt>OUT0</tt></b>: Bought one item
<b><tt>OUT1</tt></b>: Fraction of items remaining
-----
212:Plant
Procedurally generated tree that grows around the objects that are nearby.

Can be mined by a robot for wood.
-----
213:Animal
Robot animals.

Click the configuration button to change animal type and adjust the slider to change age.
-----
214:Player Activator
Sets the target as player when receiving a signal.

Click the crosshair button to set a target as player.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
<b><tt>OUT0</tt></b>: Outputs status
-----
215:Plastic Polygon
Plastic object with customizable shape and color. Click a corner and then the configuration button to change the color.

It can also be modified during simulation although this is unsupported and will lead to weird behavior.
-----
216:Key Listener
Detects and outputs a signal when a key is pressed.

Click the configuration button to select a key.

<b><big>Socket information:</big></b>
<b><tt>OUT0</tt></b>: Outputs a signal when the selected key is pressed
-----
217:State Saver
Save the current state of the level. It can be later returned by the player in the Play section of the main menu.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Activate
-----
218:IF-select
Outputs the value of IN0 if IN2 is less than 0.5, otherwise output the value of IN1.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value
<b><tt>IN1</tt></b>: Value
<b><tt>IN2</tt></b>: Conditional
<b><tt>OUT0</tt></b>: Conditional ? IN1 : IN0
-----
219:Cam Rotator
Rotate the camera to the angle of IN1 if IN0 is above 0.5.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Set camera angle
<b><tt>IN1</tt></b>: Camera angle value
-----
220:Level Manager
The level manager object was broken in 1.5.1, and is currently useless.

<s>Set the light intensity of your level.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Set ambient to value of IN1
<b><tt>IN1</tt></b>: Ambient value
<b><tt>IN2</tt></b>: Set diffuse to value of IN3
<b><tt>IN3</tt></b>: Diffuse value</s>
-----
221:Treasure Chest
Treasure chest with randomized loot.

Click the configuration button to set a custom loot. <sub><i>(PC only)</i></sub>
-----
222:Decoration
Miscellaneous decorations, such as stones, plants and signs.
-----
223:8-splitter
Works like a Y-splitter but with more outputs.

Forwards the value from its input port to all its output ports.

<b><big>Socket information:</big></b>
<b><tt>IN0</tt></b>: Value
<b><tt>OUT0</tt></b>: Unmodified value of IN0
<b><tt>OUT1</tt></b>: Unmodified value of IN0
<b><tt>OUT2</tt></b>: Unmodified value of IN0
<b><tt>OUT3</tt></b>: Unmodified value of IN0
<b><tt>OUT4</tt></b>: Unmodified value of IN0
<b><tt>OUT5</tt></b>: Unmodified value of IN0
<b><tt>OUT6</tt></b>: Unmodified value of IN0
<b><tt>OUT7</tt></b>: Unmodified value of IN0
-----
224:Ladder Step
Single ladder step. Can be produced by the robot's Builder tool at the cost of 2 wood, and is extremely useful for navigating in caves.
-----
225:Mini Spikebot
A robot similar to the Spikebot, but way smaller. How cute!

It is very fast and can jump very high.
-----
