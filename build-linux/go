#!/bin/bash
user_home="$HOME"
makecmd="make"

CC=gcc
CXX=g++

debug="0"
nodebug="0"
release="0"
run="1"
cores="6"
do_test="0"
static_analysis="0"

CONFIG_PATH=`pwd`/config.sh

[[ -f "$CONFIG_PATH" ]] && source "$CONFIG_PATH"

DEBUG_SHARED="-O0 -ggdb -ffast-math -Werror=return-type -DDEBUG=1 $EXTRA_DEBUGFLAGS_SHARED"

DEBUGFLAGS_CC="$DEBUG_SHARED  $EXTRA_DEBUGFLAGS $EXTRA_DEBUGFLAGS_CC"
DEBUGFLAGS_CXX="$DEBUG_SHARED $EXTRA_DEBUGFLAGS $EXTRA_DEBUGFLAGS_CXX"
DEBUGFLAGS_LD="-rdynamic $EXTRA_DEBUGFLAGS_LD"

RELEASE_SHARED="-ffast-math -DNDEBUG=1 -s -fomit-frame-pointer -fvisibility=hidden -fdata-sections -ffunction-sections"

RELEASEFLAGS_CC="$RELEASE_SHARED $EXTRA_RELEASEFLAGS_CC"
RELEASEFLAGS_CXX="$RELEASE_SHARED -O2 -fvisibility-inlines-hidden -fno-rtti $EXTRA_RELEASEFLAGS_CXX"
RELEASEFLAGS_LD="-Wl,-O,-s,--gc-sections $EXTRA_RELEASEFLAGS_LD"

if [ "$CC" = "gcc" ]; then
    DEBUGFLAGS_CC="$DEBUGFLAGS_CC -rdynamic"
    DEBUGFLAGS_CXX="$DEBUGFLAGS_CXX -rdynamic"
    RELEASEFLAGS_CC="$RELEASEFLAGS_CC -s"
    RELEASEFLAGS_CXX="$RELEASEFLAGS_CC -s"
else
    RELEASEFLAGS_LD="$RELEASEFLAGS_LD -s"
fi

while test $# -gt 0; do
    case "$1" in
        --clean)
            echo "Cleaning..."
            $makecmd clean
            shift
            ;;
        -cs)
            echo "Cleaning and compiling"
            $makecmd clean
            run="0"
            shift
            ;;
        -csa)
            echo "Cleaning, then performing static analysis"
            $makecmd clean
            run="0"
            static_analysis="1"
            shift
            ;;
        -sa)
            echo "Performing static analysis"
            run="0"
            static_analysis="1"
            shift
            ;;
        -s|--silent)
            echo "only compiling"
            run="0"
            shift
            ;;
        --without-gdb)
            debug="0"
            shift
            ;;
        -r|--release)
            release="1"
            shift
            ;;
        -v|--valgrind)
            debug="2"
            shift
            ;;
        --leak)
            debug="4"
            shift
            ;;
        -c|--cachegrind)
            debug="3"
            shift
            ;;
        -t)
            do_test="1"
            shift
            ;;
        --single)
            cores="1"
            shift
            ;;
        -nd)
            nodebug="1"
            shift
            ;;
        *)
            echo "undefined option: $1"
            shift
            ;;
    esac
done

if [ "$release" -eq "1" ]; then
    CFLAGS="$RELEASEFLAGS_CC"
    CXXFLAGS="$RELEASEFLAGS_CXX"
    CPPFLAGS="$RELEASEFLAGS_CXX"
    LDFLAGS="$RELEASEFLAGS_LD"
else
    CFLAGS="$DEBUGFLAGS_CC"
    LDFLAGS="$DEBUGFLAGS_LD"
    CXXFLAGS="$DEBUGFLAGS_CXX"
    CPPFLAGS="$DEBUGFLAGS_CXX"
fi

if [ "$do_test" -eq "1" ]; then
    echo "Running tests..."
    INCLUDEMAN=" -I/usr/include/ -I/usr/include/SDL2/ -I../src/tms/backends/linux/ -I../src/src/ -I../src/ -I../src/include/ -I../src/gtk-undo -DGLEW_STATIC "
    $CC $INCLUDEMAN ../src/src/tests/main.cc ../src/src/rand.c -o test && ./test
    exit
fi

echo "Release: $release"
echo "Run:     $run"

if [ "$static_analysis" -eq "1" ]; then
    CC="$CC" CXX="$CXX" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" scan-build $makecmd -j "$cores"
    exit
fi

$makecmd -j "$cores" CC="$CC" CXX="$CXX" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" &&
if [ "$run" -eq "1" ]; then
    if [ "$nodebug" -eq "1" ]; then
        exec 2>/dev/null
    fi

    if [ "$debug" -eq "3" ]; then # -c
        rm callgrind.* &> /dev/null
        valgrind --tool=callgrind -v --dump-every-bb=10000000 ./apparatus2
    elif [ "$debug" -eq "2" ]; then # -v
        valgrind --suppressions=./valgrind.supp --tool=memcheck --leak-check=no --show-reachable=yes --num-callers=20 --track-fds=yes --track-origins=yes ./apparatus2
        #valgrind --gen-suppressions=all --leak-check=no --show-possibly-lost=no --leak-resolution=low --smc-check=none --track-origins=yes ./apparatus2
    elif [ "$debug" -eq "4" ]; then # --leak
        valgrind --suppressions=./valgrind.supp --tool=memcheck --leak-check=full --show-possibly-lost=yes --track-origins=yes ./apparatus2
    elif [ "$debug" -eq "1" ]; then
        gdb -ex run -ex quit ./apparatus2
    else
        ./apparatus2
    fi
fi
